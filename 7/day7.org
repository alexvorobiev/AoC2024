#+title: Advent of Code 2024 Day 7
#+last_modified: 2025-02-01 21:44:18 alex
#+property: header-args:j :session *J* :results verbatim

* Table of contents                                                     :TOC:
- [[#1][1]]
  - [[#data][Data]]
  - [[#check-lower-and-upper-bounds][Check lower and upper bounds]]
- [[#org-configuration][org-configuration]]

* 1
Brute force: for each test we need to check all possible sequences of =+= and =*= . The length of the sequences is the length of the input array =n-1=. Let's use binary numbers from =0= to $2^n-1 -1$ to represent the sequences where =0= corresponds to =+= and =1= corresponds to =*=.

Maybe check the boundaries first so that the test value is within the range of the sum and the product of all the numbers.
** Data
#+begin_src j :tangle yes :results silent
  f =: 'input.txt'
#+end_src
#+begin_src j :results silent
  f =: 'test.txt'
#+end_src
#+begin_src j :tangle yes :results silent
  d =: >'b' freads f
#+end_src
#+begin_src j
  (':'&(i.~))"1 d
#+end_src

#+RESULTS:
: 3 4 2 3 4 6 3 5 3
#+begin_src j
  (':'&E.)"1 d
#+end_src

#+RESULTS:
: 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
: 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
: 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
: 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
: 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
: 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
: 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
: 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
: 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
#+begin_src j
  <;._1 ':', ]{. d
#+end_src

#+RESULTS:
: ┌───┬────────────┐
: │190│ 10 19      │
: └───┴────────────┘
#+begin_src j
  {{ <;._1 ':', y }}"1 d
#+end_src

#+RESULTS:
#+begin_example
┌──────┬─────────────┐
│190   │ 10 19       │
├──────┼─────────────┤
│3267  │ 81 40 27    │
├──────┼─────────────┤
│83    │ 17 5        │
├──────┼─────────────┤
│156   │ 15 6        │
├──────┼─────────────┤
│7290  │ 6 8 6 15    │
├──────┼─────────────┤
│161011│ 16 10 13    │
├──────┼─────────────┤
│192   │ 17 8 14     │
├──────┼─────────────┤
│21037 │ 9 7 18 13   │
├──────┼─────────────┤
│292   │ 11 6 16 20  │
└──────┴─────────────┘
#+end_example

Convert strings to numbers
#+begin_src j :tangle yes :results silent
  ]m=: ".&.> {{ <;._1 ':', y }}"1 d
#+end_src

#+RESULTS:
#+begin_example
┌──────┬──────────┐
│190   │10 19     │
├──────┼──────────┤
│3267  │81 40 27  │
├──────┼──────────┤
│83    │17 5      │
├──────┼──────────┤
│156   │15 6      │
├──────┼──────────┤
│7290  │6 8 6 15  │
├──────┼──────────┤
│161011│16 10 13  │
├──────┼──────────┤
│192   │17 8 14   │
├──────┼──────────┤
│21037 │9 7 18 13 │
├──────┼──────────┤
│292   │11 6 16 20│
└──────┴──────────┘
#+end_example
** Check lower and upper bounds
#+begin_src j
  (*/,+/)>1{{.m
#+end_src

#+RESULTS:
: 190 29
#+begin_src j
  ((+/,*/)@:>@:(1&{))"1 m
#+end_src

#+RESULTS:
:  29   190
: 148 87480
:  22    85
:  21    90
:  35  4320
:  39  2080
:  39  1904
:  47 14742
:  53 21120

Fork
#+begin_src j
  (;((+/,*/)@:>))/"1 m
#+end_src

#+RESULTS:
#+begin_example
┌────────┬─────────┐
│┌───┐   │29 190   │
││190│   │         │
│└───┘   │         │
├────────┼─────────┤
│┌────┐  │148 87480│
││3267│  │         │
│└────┘  │         │
├────────┼─────────┤
│┌──┐    │22 85    │
││83│    │         │
│└──┘    │         │
├────────┼─────────┤
│┌───┐   │21 90    │
││156│   │         │
│└───┘   │         │
├────────┼─────────┤
│┌────┐  │35 4320  │
││7290│  │         │
│└────┘  │         │
├────────┼─────────┤
│┌──────┐│39 2080  │
││161011││         │
│└──────┘│         │
├────────┼─────────┤
│┌───┐   │39 1904  │
││192│   │         │
│└───┘   │         │
├────────┼─────────┤
│┌─────┐ │47 14742 │
││21037│ │         │
│└─────┘ │         │
├────────┼─────────┤
│┌───┐   │53 21120 │
││292│   │         │
│└───┘   │         │
└────────┴─────────┘
#+end_example

#+begin_src j
  (()((+/,*/)@:>))/"1 m
#+end_src

* org-configuration
#+startup: align fold nodlcheck hidestars oddeven lognotestate inlineimages
#+options: ^:nil toc:2
#+property: header-args:emacs-lisp :results silent
# Local Variables:
# eval: (add-hook 'before-save-hook 'time-stamp nil t)
# time-stamp-active: t
# End:
